name: Create Release
description: Create Release notes

inputs:
  branch:
    required: false
    default: "main"
    description: "Branch"

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh
      shell: bash

    - name: Authenticate GitHub CLI
      run: gh auth setup-git
      shell: bash

    - name: Determine release type
      id: release_type
      run: |
        TAG_NAME=${{ github.ref_name }}
        if [[ "$TAG_NAME" == *beta* ]]; then
          echo "release_type=Pre-release (Beta)" >> $GITHUB_ENV
          echo "prerelease=true" >> $GITHUB_ENV
        elif [[ "$TAG_NAME" == *rc* ]]; then
          echo "release_type=Pre-release (Release Candidate)" >> $GITHUB_ENV
          echo "prerelease=true" >> $GITHUB_ENV
        else
          echo "release_type=Stable" >> $GITHUB_ENV
          echo "prerelease=false" >> $GITHUB_ENV
        fi

      shell: bash
    - name: Get commits since last tag
      id: commits
      run: |
        CURRENT_TAG=$(git describe --tags --abbrev=0 HEAD)
        
        get_previous_stable_tag() {
          PREV_TAG=""
          for tag in $(git tag --sort=-creatordate); do
            # Pokud je tag stabilní (např. v1.0.0, v1.2.3, atd.), ale není stejný jako aktuální
            if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ "$tag" != "$CURRENT_TAG" ]]; then
              PREV_TAG=$tag
              break
            fi
          done
          echo $PREV_TAG
        }
        
        if [[ "$CURRENT_TAG" =~ -beta || "$CURRENT_TAG" =~ -rc ]]; then
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
        else
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -B 1 "$CURRENT_TAG" | head -n 1)
        fi
        
        if [[ "$CURRENT_TAG" == "$PREV_TAG" ]]; then
          echo "Current tag is the same as the previous tag, using the previous stable tag."
          PREV_TAG=$(get_previous_stable_tag)
        fi
        
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, using initial commit."
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        COMMITS=""
        
        CURRENT_TAG_SHORT=$(echo "$CURRENT_TAG" | cut -c 1-7)
        PREV_TAG_SHORT=$(echo "$PREV_TAG" | cut -c 1-7)
        
        COMPARE_URL="https://github.com/${{ github.repository }}/compare/$PREV_TAG...$CURRENT_TAG"
        
        DIFF_TEXT="<a href=\"$COMPARE_URL\">Diff: $PREV_TAG...$CURRENT_TAG</a>"
        
        COMMITS+="<h2>Changes</h2>"
        
        COMMITS+="<p><a href=\"$COMPARE_URL\">Diff: $PREV_TAG...$CURRENT_TAG</a></p>"
        
        COMMITS+="<ul>"
        declare -A FIXUPS
        
        while read -r commit_hash; do
          COMMIT_MSG=$(git log -n 1 --pretty=format:"%s" "$commit_hash")
          AUTHOR=$(gh api "/repos/${{ github.repository }}/commits/$commit_hash" --jq '.author.login')
        
          if [[ "$COMMIT_MSG" == fixup!* ]]; then
            ORIGINAL_HASH=$(git log -n 1 --format="%H" "$commit_hash"^)
            FIXUPS["$ORIGINAL_HASH"]+="$commit_hash "
            continue
          fi
        
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/$commit_hash"
          echo "Checking commit: $COMMIT_URL"
        
          ISSUE_URLS=$(gh api "/repos/${{ github.repository }}/issues?state=closed" --jq "[.[] | select(.body != null and (.body | test(\"(Resolve|Close).*${commit_hash}\")))][].html_url" || echo "")
          ISSUE_COMMENT_URLS=$(gh api "/repos/${{ github.repository }}/issues/comments" --jq "[.[] | select(.body != null and (.body | test(\"(Resolve|Close).*${commit_hash}\")))][].html_url" || echo "")
          PR_URLS=$(gh api "/repos/${{ github.repository }}/pulls?state=all" --jq "[.[] | select(.body != null and (.body | contains(\"${commit_hash}\")))][].html_url" || echo "")
          REFERENCES="$ISSUE_URLS $ISSUE_COMMENT_URLS"
        
          ISSUE_URLS=$(echo "$ISSUE_URLS" | sed 's/#issuecomment-[0-9]*//g')
          ISSUE_COMMENT_URLS=$(echo "$ISSUE_COMMENT_URLS" | sed 's/#issuecomment-[0-9]*//g')
          COMMIT_HASH_SHORT=$(echo "$commit_hash" | cut -c 1-7)
        
          COMMITS+="<li>$COMMIT_MSG [ <a href=\"$COMMIT_URL\">$COMMIT_HASH_SHORT</a> ] (@$AUTHOR)"
        
          # Přidání všech odkazů na Issues
          if [[ -n "$ISSUE_URLS" ]]; then
            COMMITS+=", (Referenced in Issues: "
            COMMITS+=$(echo "$ISSUE_URLS" | tr '\n' ' ' | sed -E "s|https://github.com/${{ github.repository }}/issues/([0-9]+)|<a href=\"https://github.com/${{ github.repository }}/issues/\1\">#\1</a>|g" | sed 's/ / , /g')
            COMMITS=$(echo "$COMMITS" | sed 's/, $//')
            COMMITS+=" )"
          fi
        
          if [[ -n "$ISSUE_COMMENT_URLS" ]]; then
            COMMITS+=", (Referenced in Comments: "
            COMMITS+=$(echo "$ISSUE_COMMENT_URLS" | tr '\n' ' '| sed -E "s|https://github.com/${{ github.repository }}/issues/([0-9]+)|<a href=\"https://github.com/${{ github.repository }}/issues/\1\">#\1</a>|g" | sed 's/ / , /g')
            COMMITS=$(echo "$COMMITS" | sed 's/, $//')
            COMMITS+=" )"
          fi
        
          if [[ -n "$PR_URLS" ]]; then
            COMMITS+=", (Referenced in PRs: "
            COMMITS+=$(echo "$PR_URLS" | tr '\n' ' '| sed -E "s|https://github.com/${{ github.repository }}/pulls/([0-9]+)|<a href=\"https://github.com/${{ github.repository }}/pulls/\1\">#\1</a>|g" | sed 's/ / , /g')
            COMMITS=$(echo "$COMMITS" | sed 's/, $//')
            COMMITS+=" )"
          fi
        
          COMMITS+="</li>"
        done < <(git log --format="%H" $PREV_TAG..HEAD)
        COMMITS+="</ul>"
        
        COMMITS=$(echo "$COMMITS" | sed 's/[[:cntrl:]]//g')
        echo "commits=$COMMITS" >> $GITHUB_ENV
      shell: bash

    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ github.ref_name }}
        body: |
          ${{ env.commits }}
        draft: false
        prerelease: ${{ env.prerelease }}
        name: ${{ github.ref_name }} - ${{ env.release_type }}